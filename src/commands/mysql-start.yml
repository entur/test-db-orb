description: |
  Builds and starts a database ready for testing.

parameters:
  mysql-version:
    description: Select a valid MySQL version, available here https://circleci.com/docs/2.0/circleci-images/#mysql
    type: string
  sql-file:
    description: Path to SQL file
    type: string
  ## -- MySQL Authentication --
  database-name:
    description: The name of the database
    type: string
  mysql-user:
    description: The user of the database
    type: string
  mysql-password:
    description: The password for the user of the databsae
    type: string
  root-password:
    description: The Root password
    type: string
  ## -- Docker --
  docker-registry:
    description: |
      The Docker registry, typically `username` or `gcr.io/[PROJECT_ID]` for GCP projects.
      If not provided, the command will look for the environment variable $DOCKER_REGISTRY
    type: string
    default: ""
  ## -- Config --
  setup-remote-docker:
    type: boolean
    default: false
  checkout:
    type: boolean
    default: false
  ## -- Defaults --
  port:
    description: The port on which this server will be accessible
    type: string
    default: "3306"
  server-name:
    description: The name of the server
    type: string
    default: "test-db"

steps:
  - when:
      condition: << parameters.setup-remote-docker >>
      steps:
        - setup_remote_docker:
            docker_layer_caching: true
  - when:
      condition: << parameters.checkout >>
      steps:
        - checkout
  - run:
      name: Make orb tests pass by forcing CIRCLE_PROJECT_REPONAME
      command: |
        if [[ -z $CIRCLE_PROJECT_REPONAME ]]; then
          echo 'export CIRCLE_PROJECT_REPONAME="test-db-mysql"' >> $BASH_ENV
          source $BASH_ENV
          echo $CIRCLE_PROJECT_REPONAME
        fi
  - run:
      name: Fail if $DOCKER_REGISTRY is not available
      command: |
        DOCKER_REGISTRY_PARAM="<< parameters.docker-registry >>"
        if [[ -n "${DOCKER_REGISTRY_PARAM}" ]]; then
          echo "Using credentials provided in parameters."
          echo 'export DOCKER_REGISTRY=$DOCKER_REGISTRY_PARAM' >> $BASH_ENV
          source $BASH_ENV
        elif [[ -n "${DOCKER_REGISTRY}" ]]; then
          echo "Using credentials from environment."
        else
          echo "No credentials were found. Looked in parameter docker-registry and environment DOCKER_REGISTRY."
          exit 1
        fi
  - run:
      name: Copy db setup to a checksum filename, this will trigger rebuild of Dockerfile
      command: |
        mkdir test-db-tmp
        echo "export SQL_CHECKSUM_FILENAME=$(md5sum '<< parameters.sql-file >>' | awk '{print $1}')" >> $BASH_ENV
        source $BASH_ENV
        echo 'Checksum: ${SQL_CHECKSUM_FILENAME}'
        cp '<< parameters.sql-file >>' './test-db-tmp/${SQL_CHECKSUM_FILENAME}.sql'
  - run:
      name: Build Dockerfile
      command: |
        touch ./test-db-tmp/Dockerfile
        echo 'FROM circleci/mysql:<< parameters.mysql-version >> as builder' >> ./test-db-tmp/Dockerfile
        echo 'RUN ["sed", "-i", "s/exec \"$@\"/echo \"not running $@\"/", "/usr/local/bin/docker-entrypoint.sh"]' >> ./test-db-tmp/Dockerfile
        echo 'ENV MYSQL_ROOT_PASSWORD=<< parameters.root-password >>' >> ./test-db-tmp/Dockerfile
        echo 'ENV MYSQL_DATABASE=<< parameters.database-name >>' >> ./test-db-tmp/Dockerfile
        echo 'ENV MYSQL_USER=<< parameters.mysql-user >>' >> ./test-db-tmp/Dockerfile
        echo 'ENV MYSQL_PASSWORD=<< parameters.mysql-password >>' >> ./test-db-tmp/Dockerfile
        echo 'COPY './test-db-tmp/${SQL_CHECKSUM_FILENAME}.sql' /docker-entrypoint-initdb.d/' >> ./test-db-tmp/Dockerfile
        echo 'RUN ["/usr/local/bin/docker-entrypoint.sh", "mysqld", "--datadir", "/initialized-db"]' >> ./test-db-tmp/Dockerfile
        echo 'FROM circleci/mysql:<< parameters.mysql-version >>' >> ./test-db-tmp/Dockerfile
        echo 'COPY --from=builder /initialized-db /var/lib/mysql' >> ./test-db-tmp/Dockerfile
        ls ./test-db-tmp
        echo 'export TEST_DB_DOCKER_NAME=${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}-test-db-sql:${SQL_CHECKSUM_FILENAME}' >> $BASH_ENV
        source $BASH_ENV
        echo ${TEST_DB_DOCKER_NAME}
        docker build -t ${TEST_DB_DOCKER_NAME} -f ./test-db-tmp/Dockerfile .
        rm -rf ./test-db-tmp
        # docker run -p << parameters.port >>:3306 --name << parameters.server-name >> -e MYSQL_ROOT_PASSWORD=<< parameters.root-password >> -d ${TEST_DB_DOCKER_NAME}
        # docker build -t  .
